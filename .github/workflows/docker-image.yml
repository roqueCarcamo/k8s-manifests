name: Build, Test, Push Docker Image with Incremental Tags, and Update Deployment

on:
  push:
    branches:
      - main
      - qa
    paths-ignore:
      - 'k8s-manifests/**' # Evita ciclos infinitos al ignorar cambios en k8s-manifests

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [main, qa]
    steps:
      # 1. Checkout del código
      - name: Checkout código
        uses: actions/checkout@v3

      # 2. Cache de Maven
      - name: Cache de Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Configurar JDK 17
      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # 4. Construir con Maven usando perfil según la rama
      - name: Construir con Maven
        run: mvn clean package -P${{ matrix.branch }} -DskipTests

      # 5. Ejecutar pruebas con Maven en paralelo
      - name: Ejecutar pruebas con Maven
        run: mvn test -P${{ matrix.branch }}

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # 1. Checkout del código
      - name: Checkout código
        uses: actions/checkout@v3

      # 2. Configurar Git
      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 3. Configurar QEMU (opcional para arquitecturas multiplataforma)
      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v2

      # 4. Configurar Docker Buildx
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Iniciar sesión en Docker Hub
      - name: Iniciar sesión en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Instalar yq para manipular archivos YAML
      - name: Instalar yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # 7. Definir el tag de la imagen
      - name: Definir tag de la imagen
        id: define_tag
        run: echo "TAG=${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      # 8. Construir y etiquetar la imagen Docker
      - name: Construir y etiquetar la imagen Docker
        run: |
          docker build . -t ${{ secrets.DOCKERHUB_USERNAME }}/demo-spring-boot:${{ env.TAG }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/demo-spring-boot:${{ env.TAG }}

      # 9. Actualizar el deployment.yaml para el entorno correspondiente
      - name: Actualizar deployment.yaml
        run: |
          ENVIRONMENT=${GITHUB_REF##*/} 
          DEPLOYMENT_FILE="k8s-manifests/${ENVIRONMENT}/deployment.yaml"
          echo "Actualizando $DEPLOYMENT_FILE con el tag ${TAG}"
          yq e -i ".spec.template.spec.containers[0].image = \"${{ secrets.DOCKERHUB_USERNAME }}/demo-spring-boot:${{ env.TAG }}\"" $DEPLOYMENT_FILE

      # 10. Commit de los cambios
      - name: Commit changes
        run: |
          ENVIRONMENT=${GITHUB_REF##*/}
          DEPLOYMENT_FILE="k8s-manifests/${ENVIRONMENT}/deployment.yaml"
          git add $DEPLOYMENT_FILE
          git commit -m "Actualizar imagen a ${{ env.TAG }}" || echo "No hay cambios que confirmar."
          git push origin $ENVIRONMENT || echo "No hay cambios que enviar."

      # 12. Salida de la imagen
      - name: Salida de la imagen
        run: echo 'Imagen construida y enviada a Docker Hub'
